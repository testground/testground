---
version: 2.1

parameters:
  go-version:
    type: string
    default: "1.16"
  workspace-dir:
    type: string
    default: "/home/circleci"

commands:
  setup:
    description: "install go, checkout and restore cache"
    steps:
      - run:
          name: "install go"
          command: |
            curl --create-dirs -o $GOPATH/go.tar.gz https://dl.google.com/go/go${GOVERSION}.linux-amd64.tar.gz
            tar --strip-components=1 -C $GOPATH -xzf $GOPATH/go.tar.gz
            rm -rf $GOPATH/go.tar.gz
      - checkout
      - restore_cache:
          keys:
            - 'v2-pkg-cache-{{ checksum "go.sum" }}-{{ .Environment.GOVERSION }}'
            - 'bin-cache-{{ .Branch }}'
  setup-macos:
    description: "install go, checkout and restore cache"
    steps:
      - run:
          name: "install go on macOS"
          command: |
            brew --version
            [ ! -d /usr/local/opt/go@1.16 ] && brew install go@1.16 && echo "done installing go"
            echo 'export GOPATH="$HOME/go"' >> $BASH_ENV
            echo 'export PATH="/usr/local/opt/go@1.16/bin:$GOPATH/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            go version
      - checkout

  setup-install-bins:
    description: "install 3rd-party binaries for integration tests"
    steps:
      - setup
      - run:
          name: "install kubectl"
          command: |
            if [ ! -f ~/bin/kubectl ]; then
            curl -L https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl -o ~/bin/kubectl
            chmod +x ~/bin/kubectl
            fi
      - run:
          name: "install kind"
          command: |
            if [ ! -f ~/bin/kind ]; then
            curl -L https://github.com/kubernetes-sigs/kind/releases/download/v0.14.0/kind-linux-amd64 -o ~/bin/kind
            chmod +x ~/bin/kind
            fi
      - save_cache:
          key: 'bin-cache-{{ .Branch }}'
          paths:
            - << pipeline.parameters.workspace-dir >>/bin

executors:
  linux:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    resource_class: large
    working_directory: << pipeline.parameters.workspace-dir >>/project
    environment:
      GOPATH: << pipeline.parameters.workspace-dir >>/go/<< pipeline.parameters.go-version >>
      PATH: << pipeline.parameters.workspace-dir >>/go/<< pipeline.parameters.go-version >>/bin:<< pipeline.parameters.workspace-dir >>/bin:/usr/local/bin:/usr/bin:/bin
      GOVERSION: << pipeline.parameters.go-version >>

workflows:
  version: 2
  main:
    jobs:
      - prepare-tidy
      - lint:
          requires:
            - prepare-tidy
      - build-test-linux-test-go:
          requires:
            - prepare-tidy
      - build-test-linux-docker:
          requires:
            - prepare-tidy
      - build-test-linux-local:
          requires:
            - prepare-tidy
      - build-test-linux-examples:
          requires:
            - prepare-tidy
      - build-macos:
          requires:
            - prepare-tidy

jobs:
  prepare-tidy:
    executor: linux
    steps:
      - setup
      - run:
          name: "make tidy"
          command: make tidy && git diff --exit-code
      - run:
          name: "make mod-download"
          command: make mod-download
      - save_cache:
          key: 'v2-pkg-cache-{{ checksum "go.sum" }}-{{ .Environment.GOVERSION }}'
          paths:
            - << pipeline.parameters.workspace-dir >>/go/<< pipeline.parameters.go-version >>/pkg/mod

  lint:
    executor: linux
    steps:
      - setup
      - run:
          name: "install linter"
          command: "pushd .. && GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.23.6 && popd"
      - run:
          name: "make lint"
          command: make lint

  build-test-linux-test-go:
    executor: linux
    steps:
      - setup-install-bins
      - run:
          name: "build testground"
          command: make install
      - run:
          name: "make test-go"
          command: |
            cd $HOME/project
            make test-go

  build-test-linux-docker:
    executor: linux
    steps:
      - setup-install-bins
      - run:
          name: "build testground"
          command: make install
      - run:
          name: "run local:docker integration tests"
          command: make test-integ-local-docker

  build-test-linux-local:
    executor: linux
    steps:
      - setup-install-bins
      - run:
          name: "build testground"
          command: make install
      - run:
          name: "run local:exec integration tests"
          command: make test-integ-local-exec

  build-test-linux-examples:
    executor: linux
    steps:
      - setup-install-bins
      - run:
          name: "build testground"
          command: make install
      - run:
          name: "run examples integration tests"
          command: make test-integ-examples

  build-macos:
    macos:
      xcode: 13.4.1
    resource_class: macos.x86.medium.gen2
    steps:
      - setup-macos
      - run:
          name: "build testground"
          command: make goinstall
